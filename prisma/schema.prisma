// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // make sure your DATABASE_URL points to Neon PostgreSQL
}

model User {
  id      Int          @id @default(autoincrement())
  email   String       @unique
  clerkId   String   @unique  
  name    String?
  quizzes UserQuiz[] // relationship to quizzes taken by the user
  answers UserAnswer[] // relationship to user's answers

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  questions   Question[] // relationship to questions in the quiz
  userQuizzes UserQuiz[] // relationship to users who have taken this quiz

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id         Int          @id @default(autoincrement())
  text       String
  quiz       Quiz         @relation(fields: [quizId], references: [id])
  quizId     Int // foreign key to quiz
  answers    Answer[] // relationship to answer options for this question
  UserAnswer UserAnswer[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  text      String
  isCorrect Boolean // mark the correct answer
  question  Question @relation(fields: [questionId], references: [id])

  questionId Int // foreign key to the question
  UserAnswer UserAnswer[]
}

model UserQuiz {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int // foreign key to the user
  quiz      Quiz    @relation(fields: [quizId], references: [id])
  quizId    Int // foreign key to the quiz
  completed Boolean @default(false)
}

model UserAnswer {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int // foreign key to the user
  question       Question @relation(fields: [questionId], references: [id])
  questionId     Int // foreign key to the question
  selectedAnswer Answer   @relation(fields: [answerId], references: [id])
  answerId       Int // foreign key to the selected answer
}
